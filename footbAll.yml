version: '3.7'
services:
    zookeeper:
        image: confluentinc/cp-zookeeper:7.4.4
        hostname: zookeper
        container_name: zookeper
        environment:
            ZOOKEEPER_CLIENT_PORT: 2181
            ZOOKEEPER_TICK_TIME: 2000
        networks: 
            - tap
        ports:
            - 22181:2181
    kafkaServer:
        image: confluentinc/cp-kafka:7.4.4
        hostname: kafkaServer
        container_name: kafkaServer
        depends_on:
           - zookeeper
        ports:
           - 29092:29092
        environment:
            KAFKA_BROKER_ID: 1
            KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafkaServer:9092,PLAINTEXT_HOST://localhost:29092
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
            KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        networks: 
              tap:
                 ipv4_address: 10.0.100.24
    kafka-ui:
        image: provectuslabs/kafka-ui:latest
        container_name: kafkaWebUI
        environment:
            - KAFKA_CLUSTERS_0_NAME=local
            - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafkaServer:9092
        ports: 
            - 8082:8080
        networks: 
            - tap
        depends_on:
            - kafkaServer
    kafka-topics:
        image: apache/kafka:latest    #creo nuobo container solo per utilizzare l'eseguibile per creare un topic
        command: > 
               bash -c "
               /opt/kafka/bin/kafka-topics.sh --create --topic topicCountries --bootstrap-server kafkaServer:9092"
        depends_on:
            - kafkaServer

        networks: 
            - tap
    logstash: 
        image: docker.elastic.co/logstash/logstash:8.13.0
        container_name: Logstash
        environment:
                XPACK_MONITORING_ENABLED: "false"
       #ports:
            #- 8081:8080
        networks: 
                tap:
                   ipv4_address: 10.0.100.22
        volumes:
               - ./docker_logstash/pipeline/log.conf:/usr/share/logstash/pipeline/logstash.conf
    telegram_bot:
           image: telegram_bot:latest
           environment:
            #TOKEN:  
             URL: https://v3.football.api-sports.io/standings?
            #API-KEY: 
           networks: 
              tap:
                 ipv4_address: 10.0.100.23
    spark:
        image: spark:latest
        hostname: spark
        container_name: spark
        volumes:
              - ./docker_spark/sparkApplication.py:/opt/tap/sparkApplication.py
        command: > 
             /opt/spark/bin/spark-submit --conf spark.driver.extraJavaOptions="-Divy.cache.dir=/tmp -Divy.home=/tmp" --packages org.apache.spark:spark-sql-kafka-0-10_2.12:3.5.1  /opt/tap/sparkApplication.py 
        networks: 
                tap:
                   ipv4_address: 10.0.100.20
        depends_on:
            kafka-topics:
                condition: service_completed_successfully         
networks:
    tap:
        name: tap
        driver: bridge
        ipam: 
            config:
                 - subnet: 10.0.100.1/24
        external: true

